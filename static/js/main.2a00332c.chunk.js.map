{"version":3,"sources":["logo.svg","serviceWorker.js","components/calculator.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Calculator","state","styles","inputRef","React","createRef","inputRef2","operation","val1","val2","additions","Number","current","value","subtractions","deletions","multiplications","equals","op","className","colspan","align","for","type","id","placeholder","ref","this","class","onClick","rowspan","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,yLCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCqJSC,G,wNAnKbC,MAAQ,G,EACRC,OAAS,G,EACTC,SAAWC,IAAMC,Y,EACjBC,UAAYF,IAAMC,Y,EAClBE,UAAY,G,EACZC,KAAO,E,EACPC,KAAO,E,EA4FPC,UAAY,WACV,EAAKF,KAAOG,OAAO,EAAKR,SAASS,QAAQC,OAGzC,EAAKN,UAAY,K,EAEnBO,aAAe,WACb,EAAKN,KAAOG,OAAO,EAAKR,SAASS,QAAQC,OAGzC,EAAKN,UAAY,K,EAEnBQ,UAAY,WACV,EAAKP,KAAOG,OAAO,EAAKR,SAASS,QAAQC,OACzC,EAAKP,UAAUM,QAAQC,MAAQ,EAAKL,KACpC,EAAKL,SAASS,QAAQC,MAAQ,GAC9B,EAAKN,UAAY,K,EAEnBS,gBAAkB,WAChB,EAAKR,KAAOG,OAAO,EAAKR,SAASS,QAAQC,OAGzC,EAAKN,UAAY,K,EAEnBU,OAAS,WACP,EAAKR,KAAOE,OAAO,EAAKR,SAASS,QAAQC,OACzC,IAAIK,EAAK,EAAKX,UAEZ,EAAKJ,SAASS,QAAQC,MADb,MAAPK,EAC4B,EAAKV,KAAO,EAAKC,KAE/B,MAAPS,EACqB,EAAKV,KAAO,EAAKC,KAE/B,MAAPS,EACqB,EAAKV,KAAO,EAAKC,KAE/B,MAAPS,EACqB,EAAKV,KAAO,EAAKC,KAGjB,EAAKD,M,uDAjIrC,OACE,yBAAKW,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBAEjB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACb,2BAAOA,UAAU,+BACf,+BACE,4BACE,wBAAIC,QAAQ,IAAIC,MAAM,UACpB,4CAGJ,4BACE,wBAAID,QAAQ,IAAIC,MAAM,UACpB,yBAAKF,UAAU,cACb,2BAAOG,IAAI,UACX,2BACEC,KAAK,OACLJ,UAAU,eACVK,GAAG,QACHC,YAAY,cACZC,IAAKC,KAAKxB,cAMlB,4BACE,4BACE,4BACEoB,KAAK,SACLK,MAAM,yBACNC,QAASF,KAAKjB,WAHhB,MAQF,4BACE,4BACEa,KAAK,SACLK,MAAM,yBACNC,QAASF,KAAKb,cAHhB,MAQF,wBAAIgB,QAAQ,KACV,4BACEP,KAAK,SACLK,MAAM,iCACNC,QAASF,KAAKV,QAHhB,OASJ,4BACE,4BACE,4BACEM,KAAK,SACLK,MAAM,yBACNC,QAASF,KAAKX,iBAHhB,MAQF,4BACE,4BACEO,KAAK,SACLK,MAAM,yBACNC,QAASF,KAAKZ,WAHhB,UAaV,yBAAKI,UAAU,mB,GA7FAY,cCIzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a00332c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./calculator.css\";\nclass Calculator extends Component {\n  state = {};\n  styles = {};\n  inputRef = React.createRef();\n  inputRef2 = React.createRef();\n  operation = \"\";\n  val1 = 0;\n  val2 = 0;\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"verticalcenter\"></div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-4\"></div>\n          <div className=\"col-sm-4\">\n            <table className=\"table table-dark tablealign\">\n              <tbody>\n                <tr>\n                  <td colspan=\"3\" align=\"center\">\n                    <h1>Calculator</h1>\n                  </td>\n                </tr>\n                <tr>\n                  <td colspan=\"3\" align=\"center\">\n                    <div className=\"form-group\">\n                      <label for=\"value\"></label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"value\"\n                        placeholder=\"enter value\"\n                        ref={this.inputRef}\n                      />\n                    </div>\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-primary btn-lg\"\n                      onClick={this.additions}\n                    >\n                      +\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-primary btn-lg\"\n                      onClick={this.subtractions}\n                    >\n                      -\n                    </button>\n                  </td>\n                  <td rowspan=\"2\">\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-primary tdalign btn-lg\"\n                      onClick={this.equals}\n                    >\n                      =\n                    </button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-primary btn-lg\"\n                      onClick={this.multiplications}\n                    >\n                      *\n                    </button>\n                  </td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-primary btn-lg\"\n                      onClick={this.deletions}\n                    >\n                      /\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"col-sm-4\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  additions = () => {\n    this.val1 = Number(this.inputRef.current.value);\n    //this.inputRef.current.value = \"\";\n    //this.inputRef2.current.value = this.val1;\n    this.operation = \"+\";\n  };\n  subtractions = () => {\n    this.val1 = Number(this.inputRef.current.value);\n    // this.inputRef.current.value = \"\";\n    //this.inputRef2.current.value = this.val1;\n    this.operation = \"-\";\n  };\n  deletions = () => {\n    this.val1 = Number(this.inputRef.current.value);\n    this.inputRef2.current.value = this.val1;\n    this.inputRef.current.value = \"\";\n    this.operation = \"/\";\n  };\n  multiplications = () => {\n    this.val1 = Number(this.inputRef.current.value);\n    // this.inputRef.current.value = \"\";\n    //this.inputRef2.current.value = this.val1;\n    this.operation = \"*\";\n  };\n  equals = () => {\n    this.val2 = Number(this.inputRef.current.value);\n    let op = this.operation;\n    if (op === \"+\") {\n      this.inputRef.current.value = this.val1 + this.val2;\n      // this.inputRef2.current.value = this.inputRef.current.value;\n    } else if (op === \"-\") {\n      this.inputRef.current.value = this.val1 - this.val2;\n      //this.inputRef2.current.value = this.inputRef.current.value;\n    } else if (op === \"/\") {\n      this.inputRef.current.value = this.val1 / this.val2;\n      // this.inputRef2.current.value = this.inputRef.current.value;\n    } else if (op === \"*\") {\n      this.inputRef.current.value = this.val1 * this.val2;\n      // this.inputRef2.current.value = this.inputRef.current.value;\n    } else {\n      this.inputRef.current.value = this.val1;\n      //this.inputRef2.current.value = this.inputRef.current.value;\n    }\n  };\n}\n\n{\n  /* <tr>\n                  <td></td>\n                  <td colspan=\"1\">\n                    <div className=\"form-group\">\n                      <label for=\"oldvalue\">Old value</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"oldvalue\"\n                        placeholder=\"older value\"\n                        ref={this.inputRef2}\n                        readonly=\"readonly\"\n                      />\n                    </div>\n                  </td>\n                  <td></td>\n                </tr> */\n}\nexport default Calculator;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Calculator from \"./components/calculator\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}